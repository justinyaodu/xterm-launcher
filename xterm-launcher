#!/bin/bash

# Used for regex matching in a few places.
space_char=' '

input_process() {
	local char
	read -N 1 char

	case "${char}" in
		$'\e')
			input_process_esc
			;;
		$'\n')
			if (( selection > 0 )); then
				output="${completions[$selection]}"
			else
				output="${input_text}"
			fi
			exit 0
			;;
		$'\t')
			# Get the longest common substring of the available
			# commands.
			input_text="$(grep -Po '^(.*)(?=.* \1.*$)' <<< \
				"${completions[0]} ${completions[-1]}")"
			;;
		$'\b')
			# Remove the last character.
			input_text="${input_text/%?}"
			completions_update
			;;
		[[:print:]])
			# Append the typed character.
			input_text+="${char}"

			# Deselect if a space is typed, to avoid autocompleting
			# the parameters to a command from the history.
			[ "${char}" == ' ' ] && selection=-1

			completions_update
			;;
	esac
}

input_process_esc() {
	local chars
	read -N 9999 -t 0.001 chars

	case "${chars}" in
		'') # Escape.
			exit 0
			;;
		'[A') # Up.
			(( selection >= 0 )) && (( selection-- ))
			;;
		'[B') # Down.
			(( selection < LINES - 2 )) &&
				(( selection < ${#completions[@]} - 1 )) &&
				(( selection++ ))
			;;
	esac
}

completions_update() {
	# Get an array of executable names which start with the input text.
	readarray -t completions < <(grep "^${input_text}" <<< "${commands}")

	# Ensure that the selection index is still in range. If there are no
	# completion options, then nothing will be selected (index -1).
	if (( selection >= ${#completions[@]} )); then
		(( selection = ${#completions[@]} - 1 ))
	fi
}

draw_display() {
	# Make the cursor invisible while drawing.
	tput civis

	clear

	# Print the text entered by the user.
	local offset=$(( ${#input_text} >= COLUMNS ? -(COLUMNS - 1) : 0 ))
	echo -n "${input_text:$offset}"

	# Determine the number of completion options visible in the window.
	local num_visible=$(( ${#completions[@]} ))
	(( num_visible > LINES - 1 )) && num_visible=$(( LINES - 1 ))

	# Print completion options to fill the rest of the screen.
	local i
	local line
	for (( i = 0; i < num_visible; i++ )); do
		line="${completions[$i]:0:$COLUMNS}"

		[[ $line =~ $space_char ]] && line="  ${line}"

		if (( i == selection )); then
			# Special formatting for the selected line.
			line="$(tput rev)${line}$(tput sgr0)"
		fi

		# Make sure there is no newline on the end of the last line,
		# which would cause undesired scrolling.
		echo
		echo -n "${line}"
	done

	# Move the cursor back to where the input text is.
	tput cup 0 ${#input_text}

	# Restore cursor visibility.
	tput cnorm
}

trap_exit() {
	# Terminate the preceding line.
	echo

	history_append "${output}"

	# Output the user's selection, if any.
	echo "${output}"
}

# mkdir_recursive <path> <permissions>
# Similar to mkdir -p, but apply the specified permissions to every directory
# created.
mkdir_recursive() {
	[ -d "${1}" ] && return 0

	# Ensure that the parent directory exists.
	mkdir_recursive "$(dirname "${1}")" || return

	# Create the directory with the specified permissions.
	mkdir -m "${2}" "${1}"
}

# Load the commands from the history file.
history_load() {
	# Location of the history file.
	data_dir="${XDG_DATA_HOME:-"${HOME}/.local/share"}/xterm-launcher"

	mkdir_recursive "${data_dir}" 700 &> /dev/null || return 1

	history_path="${data_dir}/history"
	if [ -f "${history_path}" ]; then
		history_commands="$(<"$history_path")"
	fi
}

# history_append <command>
# Add a command to the history file, if it is suitable for inclusion.
history_append() {
	# Exclude commands that are already in the command list.
	grep -qx "${1}" <<< "${commands}" && return

	# Only include commands with spaces (indicates that command-line
	# parameters are being provided). This makes it harder for typos to be
	# stored in the history.
	[[ $1 =~ $space_char ]] || return

	# Append to the history file if it is available.
	[ "${history_path}" ] && echo "${1}" >> "${history_path}"
}

# Initialize the list of commands.
commands_load() {
	commands="$({
			# Command names.
			compgen -c # co
			# Builtins.
			compgen -b

			# Keywords.
			compgen -k

			# History commands.
			[ "${history_commands}" ] && echo "${history_commands}"
		# Remove lines appearing more than once. This gets all the
		# commands which are not builtins or keywords.
		} | sort | uniq -u)"
}

main() {
	trap trap_exit EXIT

	# Do not echo user input.
	stty -echo

	# Initialization.
	history_load
	commands_load
	selection=0
	completions_update

	# Draw the first time.
	draw_display

	while :; do
		input_process
		draw_display
	done
}

if [ "${1}" == '--in-xterm' ]; then
	main
else
	# Run this script in an XTerm window, passing along any parameters.
	xterm "${@}" -l -lf '-' -e "'${0}' --in-xterm" |
		tail -n 1 | tr -d '\r' | bash &
fi
